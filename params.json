{"name":"Tcled","tagline":"Pure Tcl Console Text Editor","body":"tcled\r\n=====\r\nSimple text editor with syntax hilighting in a single file tcl script!\r\n\r\nThis software is released under a simple 2-clause BSD license.\r\n\r\nPure Tcl Console Text Editor\r\n----------------------------\r\nThis editor is based on Steve Redler's minimal console text editor\r\nin Tcl (http://wiki.tcl.tk/11820). I took Steve's code and modified it to do\r\nsyntax hilighting. Since then it's had enough features added to it that it is\r\nnow good enough for me to use as my primary code editor.\r\n\r\nPart of the reason I wrote this is because I got tired of console text editors\r\nbehaving very differently from regular GUI text editors. As such, this has key\r\nbindings that's as close as possible to GUI text editors: ctrl-S to save files,\r\nF3 to search, ctrl-G to go to line etc.\r\n\r\nAnother reason I wrote this was because I needed a decent editor, with syntax\r\nhilighting, in environments that don't have compilers and where it's difficult\r\nor impossible to install binaries correctly. Cisco routers and Tivo boxes for\r\nexample (in my case it was GreenPacket routers back when I was employed by\r\nGreenPacket to develop software for their routers). Fortunately these routers\r\nalmost always include tcl and fortunately tcl is powerful enough that it's\r\npossible to write a simple text editor without any additional modules.\r\n\r\nFeatures:\r\n---------\r\n- Basic syntax highlighting. The highlighting is line based and can easily cope\r\n  with Tcl style # comments but because it is line based it can't cope with\r\n  multiline C style /* comments */\r\n- Implements search, goto and save.\r\n- Handles Home and End keys.\r\n- Auto resizes the editor to fit the terminal window.\r\n- Implements a simple auto-indenting. When inserting a newline by pressing the\r\n  Enter or Return key the leading whitespace of the previous line is copied and\r\n  automatically inserted.\r\n- Converts spaces to tabs when pasting text.\r\n- Implements key rate limiting for control characters and escape sequences.\r\n  This is to improve responsiveness especially on slow machines/connections so\r\n  that you don't accidentally \"over-delete\" when you press the delete key for \r\n  too long.\r\n- Implements undo and redo.\r\n- Implements suspending and resuming the editing session.\r\n- Implements tab completion based on words already in the current document.\r\n- Supports CTags's tags file (if one is found) so you can look up function and\r\n  variable definitions.\r\n- Supports X/Gnome/Windows/Mac clipboard if available (requires Tk, no Tk\r\n  widgets will be created just using the cross-platform clipboard support)\r\n- Supports executing shell commands (see documentation for F2 below). The result\r\n  of the shell command can then either be inserted directly into the document\r\n  or copied to the clipboard. With this feature your OS is your IDE!\r\n\r\nUsage:\r\n------\r\n- `Arrow keys` : Moves the cursor around. Typing anything inserts text at the\r\n  cursor.\r\n- `Backspace` : Deletes the character before the cursor.\r\n- `Delete` : Deletes the character behind the cursor.\r\n- `Home` : Moves the cursor to the first non-whitespace character on the\r\n  current line. Pressing it a second time moves the cursor to the beginning of\r\n  the line.\r\n- `End` : Moves the cursor to the end of the line.\r\n- `Page Up` and `Page Down` : Moves the cursor backwards and forwards one full\r\n  page at a time.\r\n- `Shift + Arrow keys` : Select text.\r\n- `Tab` while text is selected : Block indent.\r\n- `Shift + Tab` while text is selected : Block de-indent.\r\n\r\nBasically the usual navigation keys behaves as expected. The \"^\" character\r\nbelow denotes pressing the Ctrl key.\r\n\r\n- `^a` : Moves the cursor to the beginning of the line.\r\n- `^c` : Copies selected text to clipboard.\r\n- `^d` : Deletes the current line.\r\n- `^e` : Moves the cursor to the End of the line.\r\n- `^f` : Find/Search. The search pattern is regexp based so characters like\r\n  \".\", \"(\" and \"[\" needs to be escaped.\r\n- `^g` : Goto line number. If you type \"here\" as the line number you will goto\r\n  the current line. Since goto keeps a history of all previous gotos the \"here\"\r\n  index is useful for bookmarking the current line.\r\n- `^o` : Page Up. Moves the cursor backwards one full page.\r\n- `^p` : Page Down. Moves the cursor forwards one full page.\r\n- `^q` : Quits/Exits the program. Ask to save the file if buffer is modified.\r\n- `^r` : Reloads the file from disk.\r\n- `^s` : Save the file.\r\n- `^v` : Paste text from clipboard.\r\n- `^w` : Suspend the session, optionally save the file and exit. The suspended\r\n  session is saved to a file with a .tsuspend extension. Opening this file will\r\n  resume where you left off.\r\n- `^x` : Cut text to clipboard.\r\n- `^y` : Redo the last undo.\r\n- `^z` : Undo the previous edit.\r\n- `^Down Arrow` : Go to definition of word under cursor (if found in tags file).\r\n- `^Up Arrow` : Return from definition.\r\n- `Tab` : When typing autocompletes the current word.\r\n- `Alt + ;` : Toggle tab guides.\r\n- `Alg + /` : Comment/uncomment selection\r\n- `F2` : Execute a shell command\r\n- `F3` : Repeat the previous search.\r\n\r\n\r\nCommand Line Arguments:\r\n-----------------------\r\n- `-s filename` : Append the syntax rules defined in a file to the current list\r\n  of syntax rules.\r\n- `-S filename` : Replace the current syntax rules with ones defined in the file.\r\n- `-f extension` : Force the syntax highlighter to use the rules for the given\r\n  extension.\r\n- `-G line_number` : Open file and go to line.\r\n- `+line_number` : Shortcut for -G line_number.\r\n- `-F regexp` : Open file and executes a find/search.\r\n- `-define variable value` : Allows you to modify global variables.\r\n\r\nCode:\r\n-----\r\nThe control character and escape sequence handling have been re-written to be\r\nmore general and to report unhandled cases. This is to make it easier to add\r\nnew features to the code. For example, if you want to implement a feature and\r\nbind it to ^k just run the editor and press `^k`. It will tell you\r\n`\"Unhandled control character:0xb\"` so that you know you should add the code as\r\na `\\u000b` case in handleControls. The same goes for escape sequences. For\r\nexample, pressing `F12` will generate the message `\"Unhandled sequence:[24~\"`\r\n\r\nSyntax Hilighting Rules:\r\n------------------------\r\nThe rules for syntax hilighting are currently hardcoded in the file and\r\ncontained within the variable syntaxRules located at the top of the code. The\r\nsyntax rules is in the form:\r\n\r\n    {filepattern} {{regexp} {formatting}..}\r\n\r\nComments (after #) are ignored. Syntax hilighting is line based so we can't\r\nhave multi-line rules like C-style comments.\r\nIf more than one rule applies to piece of text then the most encompassing rule\r\nwins. \r\nFor example for the text:\r\n\r\n    \"$example\"\r\n\t\r\nboth the script variable (due to `$`) and the string rules `(\".*?\")` apply. \r\nHowever since the string rule encompasses the script variable rule then the \r\nstring rule wins and the text is colored according to the string rule.\r\n\r\nBut within each rule the opposite is true. If the regexp matches a piece of \r\ntext multiple times then the most specific match wins. For example for the Tcl \r\nvariable regexp:\r\n\r\n    {(?:set|append|incr) ([a-zA-Z_][a-zA-Z0-9_]*)}\r\n\r\nthe text:\r\n\r\n    set x\r\n\r\nmatches twice. Once for `set x` and another time for `x`. Since `x` is more\r\nspecific then only it will be colored by the rule. This overcomes Tcl's lack of\r\nlook-behind in its regexp engine.\r\n\r\nFormatting is defined by ANSI escape sequence. For example bright green is\r\n`{1;32}`. The arrays `fg`, `bg` and `style` above makes it more convenient to\r\ndefine the formatting. Using the previous example bright green may be written\r\nas `{$style(bright);$fg(green)}`.\r\n\r\nAlso, due to the way the renderig engine works, the syntax hilighting rules\r\ncannot distinguish between tabs and spaces. So for the purpose of writing the\r\nsyntax regexp `\" \"`, `\"\\s\"`, `\"\\t\"` and `\"[[:space:]]\"` are synonymous.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}